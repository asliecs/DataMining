# -*- coding: utf-8 -*-
"""Tarea1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WlcJcAmbdW2UU9ci7-kJuqRSmwJo13dx

## Ejercicio 2

‚Äúx‚Äù y ‚Äúy‚Äù como vectores
"""

import numpy as np
#seaborn se utiliza junto con matlplotlob
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

x = np.array([3, -5, 31, -1, -9, 10, 0, 18])
y = np.array([1, 1, -3, 1, -99, -10, 10, -7])
print(x)
print(y)

"""Media, la varianza, la ra√≠z cuadrada y la desviaci√≥n est√°ndar de y."""

media = np.mean(y)
print("Media:", media)

varianza = np.var(y)
print("Varianza:", varianza)

raiz = np.sqrt(y)
print("Ra√≠z cuadrada:", raiz)

desviacion = np.std(y)
print("Desviaci√≥n estandar:", desviacion)

y_corregido = np.where(y < 0, np.nan, y)
desviacion_estandar = np.nanstd(y_corregido)
print("Desviaci√≥n est√°ndar (sin NaN):", desviacion_estandar)

"""Correlaci√≥n entre x y y."""

correlacion = np.corrcoef(x, y)
print("Correlaci√≥n:", correlacion)

"""Extraer las entradas 2 a la 7 de x."""

entradas_2_a_7 = x[1:7]
print("Entradas 2 a 7 de x:", entradas_2_a_7)

""" **Extraer** las entradas de y excepto la 2 y la 7."""

sin_entradas = np.delete(y, [1, 6])
print("Y sin las entradas 2 y 7:", sin_entradas)
print("Vector original:", y)

""" Extraer las entradas de y menores a -3 o mayores a 10."""

menor_mayor = y[(y < -3) | (y > 10)]
print("Y menores a -3 o mayores a 10:", menor_mayor)

"""Extraer las entradas de x mayores a 0 y que sean n√∫meros pares."""

mayor_par = x[(x > 0) & (x % 2 == 0)]
print("X mayores a 0 y pares:", mayor_par)

"""## Ejercicio 3"""

matriz = np.array([[1,2, 3], [4, 5, 6], [7, 8, 9], [11, 12, 13]])
print(matriz)

"""Datos primera fila, columna del 1 al **3**"""

A = matriz[0, 0:3]
print(A)

"""Todas las filas de la segunda columna"""

B = matriz[:, 1]
print(B)

"""Elemento en fila 3, columna 3"""

C = matriz[2,2]
print(C)

"""Elemento 11 en orden de *columnas*"""

# Aplanar la matriz en orden de columnas (Fortran order)
orden_columnas= matriz.ravel(order='F')
print(orden_columnas)

D = orden_columnas[10]
print(D)

"""## Ejercicio 4

Convertir a una matriz
"""

#Ejemplo con una lista
lista = [1, 2, 3, 4, 5, 6]
print(lista)
matriz = np.array(lista)
print(matriz)

#Ejemplo con una lista de listas
lista_de_listas = [[1, 2, 3], [4, 5, 6]]
print(lista_de_listas)
matriz = np.array(lista_de_listas)
print(matriz)

"""Convertir a un DataFrame

Usamos pandas
"""

import pandas as pd

#Ejemplo con una lista
lista = [1, 2, 3, 4, 5, 6]
print(lista)

df = pd.DataFrame(lista, columns=["Columna"])
print(df)

#Ejemplo con una matriz
matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(matriz)

df = pd.DataFrame(matriz, columns=["Columna 1", "Columna 2", "Columna 3"])
print(df)

#Ejemplo con un diccionario
diccionario = {"Columna 1": [1, 4, 7], "Columna 2": [2, 5, 8], "Columna 3": [3, 6, 9]}
print(diccionario)

df = pd.DataFrame(diccionario)
print(df)

"""De matriz a DataFrame"""

matriz = np.array([[1,2,3],[4,5,6], [7,8,9]])
print(matriz)

df = pd.DataFrame(matriz, columns=["Columna 1", "Columna 2", "Columna 3"])
print(df)

"""De DataFrame a matriz"""

matriz = df.to_numpy()
print(matriz)

"""Ejercicio 5"""

diccionario = {"Peso": [76, 67, 55, 57, 87, 48], "Edad": [25, 23, 19, 18, 57, 13], "Nivel Educativo": ["Lic", "Bach", "Bach", "Bach", "Dr", "MSc"]}
df = pd.DataFrame(diccionario)
print(df)

"""Ejercicio 6



"""

#Vector formado por las componentes positivas de x.
x = np.array([2, -5, 4, 6, -2, 8])
print(x)

x_pos = x[x > 0]
print(x_pos)

#Vector formado por las componentes negativas de x
x_neg = x[x < 0]
print(x_neg)

#Vector x eliminada la primera componente.
x_sin_primera = x[1:]
print(x_sin_primera)

#Vector x tomando las componentes con √≠ndice impares, es decir, x[1] = 2, x[3] = 4 y x[5] = ‚àí2.
 x_impar = x[1::2] #desde el elemento en posicion 1 y va de 2 en 2
 print(x_impar)

"""Ejercicio 7

"""

#Representar gr√°ficamente la funci√≥n coseno en el intervalo [0, 2œÄ].
#Para esto creamos el vector x de la siguiente forma x<-seq(0,2*pi,length=100).
#p.linspace(start, stop, num):
#start: El valor inicial del vector (en este caso, 0).
#stop: El valor final del vector (en este caso, 2ùúã).
#num: La cantidad de puntos equidistantes que deseas (en este caso, 100).

x = np.linspace(0, 2*np.pi, 100)

#graficamos con matplotlib
y = np.cos(x)
plt.plot(x, y)
plt.xlabel("x")
plt.ylabel("cos(x)")
plt.title("Funci√≥n coseno")
plt.show()

"""Ejercicio 8

Para tabla de Datos que viene en el archivo DJTable.csv el cual contiene los valores de las acciones de las principales empresas de Estados Unidos en el a√±o 2010, grafique (en un mismo gr√°fico) las series de valores de las acciones de las empresas CSCO (Cisco), IBM, INTC (Intel) y MSFT (Microsoft).
"""

datos = pd.read_csv("DJTable.csv", sep=";", decimal=".")
print(datos.columns)
datos = datos.rename(columns={"Unnamed: 0": "Fecha"})
print(datos.columns)
datos["Fecha"] = pd.to_datetime(datos["Fecha"], format="%d/%m/%Y")

plt.figure(figsize=(10, 6))
plt.plot(datos["Fecha"], datos["CSCO"], label="Cisco", color="blue")
plt.plot(datos["Fecha"], datos["IBM"], label="IBM", color="red")
plt.plot(datos["Fecha"], datos["INTC"], label="Intel", color="green")
plt.plot(datos["Fecha"], datos["MSFT"], label="Microsoft", color="purple")

plt.xlabel("Fecha")
plt.ylabel("Precio de Acciones")
plt.title("Valores de Acciones de Empresas en 2010")
plt.legend(loc="upper right")
plt.show()

"""Lo mismo pero con seaborn"""

## Reestructurar los datos para que est√©n en formato largo (long format) para Seaborn
datos_largos = pd.melt(datos, id_vars=["Fecha"], value_vars=['CSCO', 'IBM', 'INTC', 'MSFT'], var_name="Empresa", value_name="Precio")

plt.figure(figsize=(10, 6))
#sns.lineplot es la funci√≥n equivalente a geom_line
#hue es para representa las empresas con colores distintos
sns.lineplot(data=datos_largos, x="Fecha", y="Precio", hue="Empresa")
plt.xlabel("Fecha")
plt.ylabel("Precio de Acciones")

plt.legend(title="Empresa")
plt.show()

"""Ejercicio 10

Con la tabla EjemploAlgoritmosRecomendacion
"""

datos2 = pd.read_csv("EjemploAlgoritmosRecomendacion.csv", sep=";", decimal=",", index_col = 0)
print(datos2.columns)


#Calcule la dimensi√≥n de la Tabla de Datos.
print("Dimesion tabla: ", datos2.shape)

#Despliegue las primeras 2 columnas de la tabla de datos.
datos2.iloc[:, 0:2]

#Ejecute un describe(summary) y un info(str) de los datos.
print(datos2.describe())

print(datos2.info())

#Calcule la Media y la Desviaci√≥n Est√°ndar para todas las variables cualesquiera.
media = datos2.mean()
print("Media:", media)

desviacion = datos2.std()
print("Desviaci√≥n estandar:", desviacion)

"""Ejercicio 11"""

plt.plot(datos2["VelocidadEntrega"], datos2["Precio"], marker='o', color='b', linestyle=' ')
plt.xlabel("Velocidad de entrega")
plt.ylabel("Precio")
plt.title("Velocidad de entrega vs Precio")
plt.show()

import seaborn as sns

# Graficar usando Seaborn scatterplot (equivalente a qplot en R)
sns.scatterplot(x='VelocidadEntrega', y='Precio', data=datos2, hue='Durabilidad', palette='viridis')
plt.xlabel('Velocidad de Entrega')
plt.ylabel('Precio')
plt.title('Entrega vs Precio')
plt.show()

"""annot=True: Muestra los valores num√©ricos dentro de cada celda.

cmap='coolwarm': Define el esquema de colores para el heatmap.

fmt=".2f": Especifica el formato para los valores mostrados (2 decimales).

linewidths=0.5: Agrega l√≠neas entre las celdas para mayor claridad.
"""

#Matriz de correlaciones
correlaciones = datos2.corr()

#crear heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlaciones, annot=True, cmap='viridis', fmt=".2f", linewidths=0.5)
plt.x
plt.title('Matriz de Correlaciones')
plt.show()

#Boxplot para encontrar los datos at√≠picos de la tabla de datos Ejemplo AlgoritmosRecomendacion.csv.
plt.figure(figsize=(8, 6))
sns.boxplot(data=datos2, orient='h', palette="Paired")
plt.xlabel('Valores')
plt.title('Boxplot para Datos At√≠picos')
plt.show()

"""Ejercicio 12

SAheart
"""

#Cargue la tabla de datos que est√° en el archivo SAheartv.csv
datos_heart = pd.read_csv("SAheart.csv", sep=";", decimal=".")
print(datos_heart.columns)

#dimension
print("Dimensi√≥n tabla:", datos_heart.shape)

#Despliegue las primeras 3 columnas de la tabla de datos.
print(datos_heart.iloc[:, 0:3])

#description e info
datos_heart.describe()

datos_heart.info()

#Correlaci√≥n entre las variables tobacco y alcohol.
correlacion = datos_heart["tobacco"].corr(datos_heart["alcohol"])
print("Correlaci√≥n entre tobacco y alcohol:", correlacion)

#Calcule la suma de las columnas con variables cuantitativas (num√©ricas).
cuantitativas = datos_heart.select_dtypes(include=['number'])
suma_cuantitativas = cuantitativas.sum()
print("Suma de las columnas cuantitativas:")
print(suma_cuantitativas)

#Calcule para todas las variables cuantitativas presentes en el archivo SAheart.csv: El m√≠nimo, el m√°ximo, la media, la mediana
#y para la variables chd determine la cantidad de Si y de No.

estadisticas = {
    "Minimo": cuantitativas.min(),
    "Maximo": cuantitativas.max(),
    "Media": cuantitativas.mean(),
    "Mediana": cuantitativas.median(),
}

estadisticas_df = pd.DataFrame(estadisticas)
print("Estad√≠sticas de las variables cuantitativas:")
print(estadisticas_df)

if "chd" in datos_heart.columns:
    conteo_chd = datos_heart["chd"].value_counts()
    print("\nCantidad de Si y No en la variable CHD:")
    print(conteo_chd)
else:
    print("\nLa variable chd no est√° presente en el DataFrame.")

#Ejercicio 13
#Funci√≥n que genera 200 n√∫meros al azar entre 1 y 500 y luego calcula cu√°ntos est√°n entre el 50 y 450, ambos inclusive.
def generar_y_contar_numeros():
    numeros = np.random.randint(1, 501, 200)
    conteo = np.sum((numeros >= 50) & (numeros <= 450))
    return conteo

resultado = generar_y_contar_numeros()
print("Cantidad de n√∫meros entre 50 y 450:", resultado)

#Ejercicio 14
#Funci√≥n que calcula el costo de una llamada telef√≥nica que ha durado t minutos sabiendo que si t < 1 el costo es de 0,4 d√≥lares,
#mientras que para duraciones superiores el costo es de 0,4 + (t ‚àí 1)/4 d√≥lares, la funci√≥n debe recibir el valor de t.

def calcular_costo_llamada(t):
    if t < 1:
        costo = 0.4
    else:
        costo = 0.4 + (t - 1) / 4
    return costo

resultado = calcular_costo_llamada(2)
print("Costo de la llamada:", resultado)

#Ejercicio 15
#Funci√≥n que recibe una matriz cuadrada A de tama√±o n √ó n y calcula su traza, es decir, la suma de los elementos de la diagonal.

def calcular_traza(A):
    n = len(A)
    traza = sum(A[i][i] for i in range(n))
    return traza

matriz = np.array([[9, 3, 4], [1, 3, -1], [4, 12, -2]])
resultado = calcular_traza(matriz)
print("Traza de la matriz:", resultado)

#Ejercicio 16
#Funci√≥n que genere los n primeros t√©rminos de la serie de Fibonacci.
def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]

    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_term = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_term)
    return fib_sequence

# N√∫mero de t√©rminos que queremos
n = 10
resultado = fibonacci(n)
print("Los primeros 10 t√©rminos de la serie de Fibonacci son:", resultado)

#Ejercicio 17
#Funci√≥n que retorne cu√°l es el mayor n√∫mero entero cuyo cuadrado no excede de x
#donde x es un n√∫mero real que se recibe como par√°metro, utilizando while.

def mayor_cuadrado_menor_x(x):
    i = 0
    while i**2 <= x:
        mayor_cuadrado = i
        i += 1
    return mayor_cuadrado

resultado = mayor_cuadrado_menor_x(20)
print("El mayor n√∫mero entero cuyo cuadrado es menor o igual a 100 es:", resultado)

#Ejercicio 20
#Funci√≥n que recibe un DataFrame y dos n√∫meros de columna y que retorna en una lista el nombre de las variables correspondientes
# las columnas, la covarianza y la correlaci√≥n entre esas dos variables.

def covarianza_correlacion(df, col1_index, col2_index):
    if col1_index < 0 or col1_index >= df.shape[1] or col2_index < 0 or col2_index >= df.shape[1]:
        return None

    col1_name = df.columns[col1_index]
    col2_name = df.columns[col2_index]

    covarianza = df[col1_name].cov(df[col2_name])
    correlacion = df[col1_name].corr(df[col2_name])

    return [col1_name, col2_name, covarianza, correlacion]

df_prueba = pd.DataFrame({"altura": [1.65, 1.70, 1.80, 1.75, 1.60],
                          "peso": [55, 60, 75, 70, 50],
                          "edad": [22, 23, 24, 21, 20]})

resultado = covarianza_correlacion(df_prueba, 0, 1)
print("Resultado de la funci√≥n covarianza_correlacion:", resultado)

#Ejercicio 21
#Importe directamente desde Excel el archivo EjemploAlgoritmosRecomendaci√≥n.xlsx el cual contiene los promedios de evaluaci√≥n
#de 100 personas que adquirieron los mismos productos o muy similares en la tienda AMAZON. Luego ejecute un describe(‚Ä¶) y un info(‚Ä¶)
#con esta tabla de datos

datos_excel = pd.read_excel("EjemploAlgoritmosRecomendacion.xlsx")
print(datos_excel.columns)

datos_excel.describe()

datos_excel.info()